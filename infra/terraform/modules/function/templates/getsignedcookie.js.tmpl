const AWS = require('aws-sdk'),
  os = require('os'),
  region = process.env.REGION,
  secretName = process.env.SECRET_NAME,
  cloudFrontUrl = process.env.CLOUDFRONT_URL,
  cloudFrontCookieValidityHours = process.env.CLOUDFRONT_COOKIE_VALIDITY_HOURS,
  keyPairID = process.env.ACCESS_KEY_ID,
  keyStart = '-----BEGIN RSA PRIVATE KEY-----',
  keyEnd = '-----END RSA PRIVATE KEY-----',
  client = new AWS.SecretsManager({
    region: region
});

const getSecret = () => {
  return client.getSecretValue({SecretId: secretName}).promise()
    .then((data) => {
      let secret;
      if ('SecretString' in data) {
        secret = data.SecretString;
      } else {
        const buff = new Buffer(data.SecretBinary, 'base64');
        secret = buff.toString('ascii');
      }
      return repairSecret(secret);
    });
};

const repairSecret = (secret) => {
  secret = secret.replace(/\r?\n|\r/g, '')
                  .replace(keyStart, '')
                  .replace(keyEnd, '');
  return `${keyStart}${os.EOL}${secret}${os.EOL}${keyEnd}`;
};

const getSignedCookies = (url, params) => {
  const signer = new AWS.CloudFront.Signer(params.keyPairId, params.privateKeyString);
  const policy = JSON.stringify({
    'Statement': [{
      'Resource': url,
      'Condition': {
        'DateLessThan': {
          'AWS:EpochTime': params.expireTime
        }
      }
    }]
  });
  const signingParams = {
        privateKeyString: params.privateKeyString,
        expires: params.expireTime,
        policy: policy
      };
  return signer.getSignedCookie(signingParams);
}

module.exports.handler = async (event) => {
  return getSecret()
    .then((token) =>{
      const signingParams = {
        keyPairId: keyPairID,
        privateKeyString: token,
        expireTime: ((new Date()).getTime()) + 3600000*cloudFrontCookieValidityHours
      };
      const signedCookies = getSignedCookies(`${cloudFrontUrl}/*`, signingParams);
      return {expiry: signingParams.expireTime, cookies: signedCookies};
    })
    .then((cookieObject) => {
      let response = {
        statusCode: 200,
        headers: {
          'Access-Control-Allow-Origin': '*',
          'Cache-Control': 'max-age=0; no-cache; no-store;'
        },
        body: JSON.stringify({}),
      };
      response.multiValueHeaders = {
        'Set-Cookie': []
      };
      Object.keys(cookieObject.cookies).map((cookieName) => {
        let cookieString = `${cookieName}=${cookieObject.cookies[cookieName]};`
        cookieString += ` expires=${new Date(cookieObject.expiry).toUTCString()};`
        cookieString += ' path=/;'
        cookieString += ' Secure;'
        response.multiValueHeaders['Set-Cookie'].push(cookieString)
      });
      return response;
    })
    .catch((err) => {
      console.log(err);
      throw(err);
    })
}
